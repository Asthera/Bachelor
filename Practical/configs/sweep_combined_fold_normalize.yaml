arch: resnet18
comment: ''
criterion: cross-entropy
device: cuda
dropout: false
dropout_rate: 0.8
early_stopping: true
epochs: 40
experiment_class: b_line
fc_layer_size: 512
folds_path: metadata_folds/kkui-lung-bline-lumify:latest/video
img_dir: /home/vn126ks/nas_storage_synology/APVV_Lung/revision_8/
init_transform:
- CT.TransformResize((600, 400))
- CT.TransformPad((600, 400))
is_validating: true
learning_rate: 0.0001
method: grid
metric:
  goal: minimize
  name: val_f1
name: with_cross_val_with_aug
number_of_classes: 2
optimizer: adam
output_transform: none
parameters:
  batch_size:
    values:
    - 32
  fold:
    values:
    - fold_0
    - fold_1
    - fold_2
    - fold_3
    - fold_4
  transform:
    values:
    - - None
    - - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.3, 0.3))], p=0.5)
      - CT.RandomElasticTransform(p=0.5, alpha=(5.0, 50.0), sigma=(4.0, 5.0))
      - T.RandomHorizontalFlip(p=0.5)
      - T.RandomAdjustSharpness(sharpness_factor=1.5, p=0.5)
      - CT.RandomContrastByMultiply(p=0.5, multiplier=(0.01, 0.1))
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    - - CT.RandomContrastByMultiply(p=0.5, multiplier=(0.01, 0.1))
      - T.RandomAdjustSharpness(sharpness_factor=1.5, p=0.5)
      - T.RandomHorizontalFlip(p=0.5)
      - CT.RandomElasticTransform(p=0.5, alpha=(5.0, 50.0), sigma=(4.0, 5.0))
      - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.3, 0.3))], p=0.5)
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    - - CT.RandomBrightnessByAdd(p=1.0, delta=(0.005, 0.015))
      - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.3, 0.3))], p=0.5)
      - T.RandomApply([T.RandomAffine(degrees=0, shear=(-30, 30, -30, 30))], p=0.5)
      - T.RandomApply([T.GaussianBlur(kernel_size=5, sigma=(0.5, 1.0))], p=0.5)
      - MT.RandSmoothFieldAdjustContrast(prob=0.5, spatial_size=(600, 400), rand_size=(2,
        2))
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    - - MT.RandSmoothFieldAdjustContrast(prob=0.5, spatial_size=(600, 400), rand_size=(2,
        2))
      - T.RandomApply([T.GaussianBlur(kernel_size=5, sigma=(0.5, 1.0))], p=0.5)
      - T.RandomApply([T.RandomAffine(degrees=0, shear=(-30, 30, -30, 30))], p=0.5)
      - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.3, 0.3))], p=0.5)
      - CT.RandomBrightnessByAdd(p=1.0, delta=(0.005, 0.015))
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    - - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.3, 0.3))], p=0.5)
      - T.RandomApply([T.ColorJitter(brightness=0.4, contrast=0.4)], p=0.5)
      - T.RandomHorizontalFlip(p=0.5)
      - CT.RandomContrastByMultiply(p=0.5, multiplier=(0.01, 0.1))
      - CT.RandomBrightnessByAdd(p=0.5, delta=(-0.35, 0.35))
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    - - CT.RandomBrightnessByAdd(p=0.5, delta=(-0.35, 0.35))
      - CT.RandomContrastByMultiply(p=0.5, multiplier=(0.01, 0.1))
      - T.RandomHorizontalFlip(p=0.5)
      - T.RandomApply([T.ColorJitter(brightness=0.4, contrast=0.4)], p=0.5)
      - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.3, 0.3))], p=0.5)
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    - - T.RandomApply([T.RandomAffine(degrees=0, shear=(-15, 15, -15, 15))], p=0.5)
      - MT.RandGaussianNoise(prob=0.5, mean=0, std=0.05)
      - T.RandomHorizontalFlip(p=0.5)
      - T.RandomApply([T.GaussianBlur(kernel_size=5, sigma=(0.5, 1.0))], p=0.5)
      - MT.RandSmoothFieldAdjustContrast(prob=0.5, spatial_size=(600, 400), rand_size=(2,
        2))
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    - - MT.RandSmoothFieldAdjustContrast(prob=0.5, spatial_size=(600, 400), rand_size=(2,
        2))
      - T.RandomApply([T.GaussianBlur(kernel_size=5, sigma=(0.5, 1.0))], p=0.5)
      - T.RandomHorizontalFlip(p=0.5)
      - MT.RandGaussianNoise(prob=0.5, mean=0, std=0.05)
      - T.RandomApply([T.RandomAffine(degrees=0, shear=(-15, 15, -15, 15))], p=0.5)
      - T.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
  yaml_file:
    values:
    - configs/sweep_combined_fold_normalize.yaml
patience: 5
pretrained: true
program: training.py
save_weights: true
saving_only_best_one_weight_val_loss: true
testing_with_best_val_loss: true
val_dist: 0.2
weights_dir: /home/vn126ks/nas_storage_synology/_experiments_output/weights/
