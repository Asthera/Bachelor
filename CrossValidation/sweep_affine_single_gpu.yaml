arch: resnet18
comment: ''
criterion: cross-entropy
device: cuda
dropout: false
dropout_rate: 0.8
early_stopping: true
epochs: 40
experiment_class: b_line
fc_layer_size: 512
folds_path: metadata_folds/kkui-lung-bline-lumify:latest/video
img_dir: /home/vn126ks/nas_storage_synology/APVV_Lung/revision_8/
init_transform:
- CT.TransformResize((600, 400))
- CT.TransformPad((600, 400))
is_validating: true
learning_rate: 0.0001
method: grid
metric:
  goal: minimize
  name: val_f1
name: with_cross_val_with_aug
number_of_classes: 2
optimizer: adam
output_transform: none
parameters:
  batch_size:
    values:
    - 32
  fold:
    values:
    - fold_0
    - fold_1
    - fold_2
    - fold_3
    - fold_4
  transform:
    values:
    - - None
    - - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.15, 0.0))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.0, 0.15))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.15, 0.15))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, translate=(0.3, 0.3))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=(-15, 15))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=(-30, 30))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=(-45, 45))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=(-5, 5))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, shear=(-15, 15, 0, 0))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, shear=(0, 0, -15, 15))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, shear=(-15, 15, -15, 15))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, shear=(-30, 30, -30, 30))], p=0.5)
    - - T.RandomHorizontalFlip(p=0.5)
    - - T.RandomVerticalFlip(p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, scale=(1.0, 1.15))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, scale=(0.85, 1.0))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, scale=(0.85, 1.15))], p=0.5)
    - - T.RandomApply([T.RandomAffine(degrees=0, scale=(0.7, 1.3))], p=0.5)
    - - T.RandomApply([T.RandomResizedCrop(size=(600, 400), scale=(0.7, 1.3), ratio=(3.0
        / 2.0, 3.0 / 2.0), antialias=True)], p=0.5)
    - - T.RandomApply([T.RandomResizedCrop(size=(600, 400), scale=(0.85, 1.15), ratio=(3.0
        / 2.0, 3.0 / 2.0), antialias=True)], p=0.5)
    - - T.RandomApply([T.RandomResizedCrop(size=(600, 400), scale=(0.85, 1.0), ratio=(3.0
        / 2.0, 3.0 / 2.0), antialias=True)], p=0.5)
    - - T.RandomApply([T.RandomResizedCrop(size=(600, 400), scale=(1.0, 1.15), ratio=(3.0
        / 2.0, 3.0 / 2.0), antialias=True)], p=0.5)
  yaml_file:
    values:
    - sweep_affine_single_gpu.yaml
patience: 5
pretrained: true
program: training.py
save_weights: true
saving_only_best_one_weight_val_loss: true
testing_with_best_val_loss: true
val_dist: 0.2
weights_dir: /home/vn126ks/nas_storage_synology/_experiments_output/weights/
